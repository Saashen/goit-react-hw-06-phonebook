{"version":3,"sources":["components/App/App.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","components/ContactListItem/ContactListItem.module.css","components/Alert/Alert.module.css","transitions/slide.module.css","transitions/slideContacts.module.css","transitions/slideLogo.module.css","transitions/slideAlert.module.css","transitions/transform.module.css","redux/phonebook/phonebookActions.js","constants.js","components/Alert/Alert.js","components/ContactForm/ContactForm.js","components/ContactForm/ContactFormContainer.js","components/Filter/Filter.js","components/Filter/FilterContainer.js","components/ContactListItem/ContactListItem.js","components/ContactListItem/ContactListItemContainer.js","components/ContactList/ContactList.js","components/ContactList/ContactListContainer.js","components/App/App.js","components/App/AppContainer.js","redux/phonebook/phonebookReducers.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","Type","addContact","createAction","deleteContact","getContactFromLS","filterContact","contactID","uuid","id","nameId","numberId","Alert","isAlert","className","styles","ShowAlert","HideAlert","ContactForm","state","name","number","isInContactList","contact","props","contacts","find","c","toLowerCase","setState","onAddContact","handleNameChange","e","value","target","handleNumberChange","test","prevState","handleSubmit","preventDefault","this","Form","onSubmit","Label","htmlFor","Caption","Input","type","onChange","CSSTransition","in","timeout","classNames","slideAlertTransition","onEntered","setTimeout","Button","Component","connect","dispatch","pbActions","Filter","filter","onFilter","length","transformTransition","unmountOnExit","ContactListItem","onDeleteContact","Contact","ContactInfo","onClick","ContactList","TransitionGroup","component","Contacts","includes","map","key","slideTransition","App","isLoaded","contactsFromLS","localStorage","getItem","JSON","parse","slideLogoTransition","Phonebook","slideContactsTransition","console","log","phonebookReducer","createReducer","payload","newContacts","setItem","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.617fcf11.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__Ny9C0\",\"Phonebook\":\"App_Phonebook__133iz\",\"Contacts\":\"App_Contacts__3nicq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter\":\"Filter_Filter__O7rco\",\"Caption\":\"Filter_Caption__2afm1\",\"Input\":\"Filter_Input__1knzP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Contacts\":\"ContactList_Contacts__3q7AW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Contact\":\"ContactListItem_Contact__3rvpD\",\"ContactInfo\":\"ContactListItem_ContactInfo__alRJP\",\"Button\":\"ContactListItem_Button__3B5uO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"HideAlert\":\"Alert_HideAlert__33Rjo\",\"ShowAlert\":\"Alert_ShowAlert__1zGrq Alert_HideAlert__33Rjo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__1Zi69\",\"enterActive\":\"slide_enterActive__VzD00\",\"exit\":\"slide_exit__1VE_9\",\"exitActive\":\"slide_exitActive__1ul8-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slideContacts_enter__3DdpA\",\"enterActive\":\"slideContacts_enterActive__2VUQ7\",\"exit\":\"slideContacts_exit__lRZrP\",\"exitActive\":\"slideContacts_exitActive__TBo9d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slideLogo_enter__1a6T5\",\"enterActive\":\"slideLogo_enterActive__2BeQx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slideAlert_enter__3bL5n\",\"enterActive\":\"slideAlert_enterActive__3S9MR\",\"exit\":\"slideAlert_exit__3RWvF\",\"exitActive\":\"slideAlert_exitActive__eRzN_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"transform_enter__2D0Tu\",\"enterActive\":\"transform_enterActive__Wj7eG\",\"exit\":\"transform_exit__35pHs\",\"exitActive\":\"transform_exitActive__3kaj5\"};","import { createAction } from '@reduxjs/toolkit';\n\nconst Type = {\n  ADD_CONTACT: 'ADD_CONTACT',\n  DELETE_CONTACT: 'DELETE_CONTACT',\n  FILTER_CONTACT: 'FILTER_CONTACT',\n  GET_CONTACT_FROM_LS: 'GET_CONTACT_FROM_LS',\n};\n\nexport const addContact = createAction(Type.ADD_CONTACT);\nexport const deleteContact = createAction(Type.DELETE_CONTACT);\nexport const getContactFromLS = createAction(Type.GET_CONTACT_FROM_LS);\nexport const filterContact = createAction(Type.FILTER_CONTACT);\n","import uuid from 'uuid/v4';\n\nexport const contactID = uuid();\n\nexport const id = {\n  nameId: uuid(),\n  numberId: uuid(),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Alert.module.css';\n\nconst Alert = ({ isAlert }) => (\n  <span className={isAlert ? styles.ShowAlert : styles.HideAlert}>\n    Contact already exists!\n  </span>\n);\n\nAlert.propTypes = {\n  isAlert: PropTypes.bool.isRequired,\n};\n\nexport default Alert;\n","import React, { Component } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\n\nimport styles from './ContactForm.module.css';\nimport slideAlertTransition from '../../transitions/slideAlert.module.css';\nimport { id, contactID } from '../../constants';\nimport Alert from '../Alert/Alert';\n\nexport default class ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n    isAlert: false,\n  };\n\n  static propTypes = {\n    onAddContact: PropTypes.func.isRequired,\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n      }),\n    ).isRequired,\n  };\n\n  isInContactList = (contact, name) =>\n    this.props.contacts.find(c => c.name.toLowerCase() === name.toLowerCase())\n      ? this.setState({ isAlert: true })\n      : this.props.onAddContact({ ...contact });\n\n  handleNameChange = e => {\n    const { value } = e.target;\n\n    this.setState({\n      name: value,\n    });\n  };\n\n  handleNumberChange = e => {\n    const { value } = e.target;\n    const regexp = /^[-\\s./0-9]*$/;\n\n    if (regexp.test(value)) {\n      this.setState({\n        number: value,\n      });\n    } else {\n      this.setState(prevState => ({\n        number: prevState.number,\n      }));\n    }\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = this.state;\n\n    const contact = {\n      id: contactID,\n      name,\n      number,\n    };\n\n    if (name === '' || number === '') {\n      return;\n    }\n\n    this.isInContactList(contact, name);\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number, isAlert } = this.state;\n    return (\n      <>\n        <form className={styles.Form} onSubmit={this.handleSubmit}>\n          <label className={styles.Label} htmlFor={id.nameId}>\n            <span className={styles.Caption}>Name</span>\n            <input\n              className={styles.Input}\n              type=\"text\"\n              onChange={this.handleNameChange}\n              value={name}\n              name=\"name\"\n              id={id.nameId}\n            />\n            <CSSTransition\n              in={isAlert}\n              timeout={250}\n              classNames={slideAlertTransition}\n              onEntered={() =>\n                setTimeout(() => this.setState({ isAlert: false }), 1500)\n              }\n            >\n              <Alert isAlert={isAlert} />\n            </CSSTransition>\n          </label>\n          <label className={styles.Label} htmlFor={id.numberId}>\n            <span className={styles.Caption}>Number</span>\n            <input\n              className={styles.Input}\n              type=\"text\"\n              onChange={this.handleNumberChange}\n              value={number}\n              name=\"number\"\n              id={id.numberId}\n            />\n          </label>\n          <button className={styles.Button} type=\"submit\">\n            Add contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport * as pbActions from '../../redux/phonebook/phonebookActions';\nimport ContactForm from './ContactForm';\n\nconst mapStateToProps = state => ({\n  contacts: state.contacts,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onAddContact: contact => dispatch(pbActions.addContact(contact)),\n  getContactFromLS: contacts => dispatch(pbActions.getContactFromLS(contacts)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\n\nimport styles from './Filter.module.css';\nimport transformTransition from '../../transitions/transform.module.css';\n\nconst Filter = ({ contacts, filter, onFilter }) => (\n  <CSSTransition\n    in={contacts.length > 1}\n    timeout={250}\n    classNames={transformTransition}\n    unmountOnExit\n  >\n    <section className={styles.Filter}>\n      <span className={styles.Caption}>Find contacts</span>\n      <input\n        className={styles.Input}\n        type=\"text\"\n        value={filter}\n        onChange={onFilter}\n      />\n    </section>\n  </CSSTransition>\n);\n\nFilter.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({ id: PropTypes.string.isRequired }),\n  ).isRequired,\n  filter: PropTypes.string.isRequired,\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { connect } from 'react-redux';\nimport * as pbActions from '../../redux/phonebook/phonebookActions';\nimport Filter from './Filter';\n\nconst mapStateToProps = state => ({\n  filter: state.filter,\n  contacts: state.contacts,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onFilter: e => dispatch(pbActions.filterContact(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactListItem.module.css';\n\nconst ContactListItem = ({ name, number, id, onDeleteContact }) => (\n  <li className={styles.Contact}>\n    <span className={styles.ContactInfo}>\n      {name}: {number}\n    </span>\n    <button\n      className={styles.Button}\n      type=\"button\"\n      onClick={() => onDeleteContact(id)}\n    />\n  </li>\n);\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import { connect } from 'react-redux';\nimport { deleteContact } from '../../redux/phonebook/phonebookActions';\nimport ContactListItem from './ContactListItem';\n\nconst mapStateToProps = state => ({\n  contacts: state.contacts,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactListItem);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n\nimport styles from './ContactList.module.css';\nimport slideTransition from '../../transitions/slide.module.css';\n\nimport ContactListItem from '../ContactListItem/ContactListItemContainer';\n\nconst ContactList = ({ contacts, filter }) => {\n  const filterContactsWithQuery = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  return !filter.length ? (\n    <TransitionGroup component=\"ul\" className={styles.Contacts}>\n      {contacts.map(contact => (\n        <CSSTransition\n          key={contact.id}\n          timeout={250}\n          classNames={slideTransition}\n          unmountOnExit\n        >\n          <ContactListItem\n            name={contact.name}\n            number={contact.number}\n            id={contact.id}\n            key={contact.id}\n          />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  ) : (\n    <TransitionGroup component=\"ul\" className={styles.Contacts}>\n      {filterContactsWithQuery().map(contact => (\n        <CSSTransition\n          key={contact.id}\n          timeout={250}\n          classNames={slideTransition}\n          unmountOnExit\n        >\n          <ContactListItem\n            name={contact.name}\n            number={contact.number}\n            id={contact.id}\n            className={styles.Contact}\n            key={contact.id}\n          />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({ id: PropTypes.string.isRequired }),\n  ).isRequired,\n  filter: PropTypes.string.isRequired,\n};\n\nexport default ContactList;\n","import { connect } from 'react-redux';\nimport ContactList from './ContactList';\n\nconst mapStateToProps = state => ({\n  contacts: state.contacts,\n  filter: state.filter,\n});\n\nexport default connect(mapStateToProps)(ContactList);\n","import React, { Component } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport styles from './App.module.css';\n\nimport slideContactsTransition from '../../transitions/slideContacts.module.css';\nimport slideLogoTransition from '../../transitions/slideLogo.module.css';\n\nimport ContactForm from '../ContactForm/ContactFormContainer';\nimport Filter from '../Filter/FilterContainer';\nimport ContactList from '../ContactList/ContactListContainer';\n\nexport default class App extends Component {\n  state = { isLoaded: false };\n\n  static propTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({ id: PropTypes.string.isRequired }),\n    ).isRequired,\n    getContactFromLS: PropTypes.func.isRequired,\n  };\n\n  componentDidMount() {\n    this.setState({ isLoaded: true });\n\n    const contactsFromLS = localStorage.getItem('contacts');\n    if (contactsFromLS) {\n      const { getContactFromLS } = this.props;\n      getContactFromLS(JSON.parse(contactsFromLS));\n    }\n  }\n\n  render() {\n    const { isLoaded } = this.state;\n    const { contacts } = this.props;\n\n    return (\n      <div className={styles.App}>\n        <CSSTransition\n          in={isLoaded}\n          timeout={500}\n          classNames={slideLogoTransition}\n        >\n          <h1 className={styles.Phonebook}>Phonebook</h1>\n        </CSSTransition>\n\n        <ContactForm />\n        <CSSTransition\n          in={contacts.length > 0}\n          timeout={500}\n          classNames={slideContactsTransition}\n          unmountOnExit\n        >\n          <h1 className={styles.Contacts}>Contacts</h1>\n        </CSSTransition>\n        <Filter />\n        <ContactList />\n      </div>\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport App from './App';\nimport * as pbActions from '../../redux/phonebook/phonebookActions';\n\nconst mapStateToProps = state => {\n  console.log(state.contacts);\n  return {\n    contacts: state.contacts,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  getContactFromLS: contacts => dispatch(pbActions.getContactFromLS(contacts)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { createReducer } from '@reduxjs/toolkit';\nimport {\n  addContact,\n  deleteContact,\n  getContactFromLS,\n  filterContact,\n} from './phonebookActions';\n\nconst initialState = {\n  contacts: [],\n  filter: '',\n};\n\nconst phonebookReducer = createReducer(initialState, {\n  [addContact]: (state, { payload }) => {\n    const newContacts = [...state.contacts, payload];\n    localStorage.setItem(newContacts);\n    return { ...state, contacts: newContacts };\n  },\n  [deleteContact]: (state, { payload }) => {\n    const newContacts = state.contacts.filter(\n      contact => contact.id !== payload,\n    );\n    localStorage.setItem(newContacts);\n    return {\n      ...state,\n      contacts: newContacts,\n    };\n  },\n  [filterContact]: (state, { payload }) => ({\n    contacts: state.contacts,\n    filter: payload,\n  }),\n  [getContactFromLS]: (state, { payload }) => ({ ...state, contacts: payload }),\n});\n\nexport default phonebookReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport phonebookReducer from './phonebook/phonebookReducers';\n\nconst store = configureStore({\n  reducer: phonebookReducer,\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport { Provider } from 'react-redux';\nimport App from './components/App/AppContainer';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"ContactForm_Form__3j6Cy\",\"Label\":\"ContactForm_Label__KZFa5\",\"Caption\":\"ContactForm_Caption__1m9tI\",\"Input\":\"ContactForm_Input__3UdAP\",\"Button\":\"ContactForm_Button__3ccI2\"};"],"sourceRoot":""}