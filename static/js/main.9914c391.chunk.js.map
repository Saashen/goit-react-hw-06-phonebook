{"version":3,"sources":["components/App/App.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","components/ContactListItem/ContactListItem.module.css","transitions/slide.module.css","transitions/slideContacts.module.css","transitions/slideLogo.module.css","components/Alert/Alert.module.css","transitions/transform.module.css","redux/phonebook/phonebookActions.js","constants.js","components/Alert/Alert.js","components/ContactForm/ContactForm.js","components/ContactForm/ContactFormContainer.js","components/Filter/Filter.js","components/Filter/FilterContainer.js","components/ContactListItem/ContactListItem.js","components/ContactListItem/ContactListItemContainer.js","components/ContactList/ContactList.js","components/ContactList/ContactListContainer.js","components/App/App.js","components/App/AppContainer.js","redux/phonebook/phonebookReducers.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","Type","addContact","createAction","deleteContact","getContactFromLS","filterContact","contactID","uuid","id","nameId","numberId","Alert","className","styles","ContactForm","state","name","number","isAlert","isInContactList","contact","props","contacts","find","c","toLowerCase","setState","onAddContact","handleNameChange","e","value","target","handleNumberChange","test","prevState","handleSubmit","preventDefault","this","Form","onSubmit","Label","htmlFor","Caption","Input","type","onChange","Button","Component","connect","dispatch","pbActions","Filter","filter","onFilter","CSSTransition","in","length","timeout","classNames","transformTransition","unmountOnExit","ContactListItem","onDeleteContact","Contact","ContactInfo","onClick","ContactList","TransitionGroup","component","Contacts","includes","map","key","slideTransition","App","isLoaded","contactsFromLS","localStorage","getItem","JSON","parse","slideLogoTransition","Phonebook","slideContactsTransition","phonebookReducer","createReducer","payload","setItem","stringify","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,UAAY,uBAAuB,SAAW,wB,mBCAvFD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,QAAU,wBAAwB,MAAQ,wB,mBCA5FD,EAAOC,QAAU,CAAC,SAAW,gC,mBCA7BD,EAAOC,QAAU,CAAC,QAAU,iCAAiC,YAAc,qCAAqC,OAAS,kC,mBCAzHD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,YAAc,2BAA2B,KAAO,oBAAoB,WAAa,4B,mBCAhID,EAAOC,QAAU,CAAC,MAAQ,6BAA6B,YAAc,mCAAmC,KAAO,4BAA4B,WAAa,oC,mBCAxJD,EAAOC,QAAU,CAAC,MAAQ,yBAAyB,YAAc,iC,mBCAjED,EAAOC,QAAU,CAAC,MAAQ,uB,mBCA1BD,EAAOC,QAAU,CAAC,MAAQ,yBAAyB,YAAc,+BAA+B,KAAO,wBAAwB,WAAa,gC,+PCCtIC,EACS,cADTA,EAEY,iBAFZA,EAGY,iBAHZA,EAIiB,sBAGVC,EAAaC,YAAaF,GAC1BG,EAAgBD,YAAaF,GAC7BI,EAAmBF,YAAaF,GAChCK,EAAgBH,YAAaF,G,yCCV7BM,EAAYC,MAEZC,EAAK,CAChBC,OAAQF,MACRG,SAAUH,O,iBCCGI,EAJD,kBACZ,0BAAMC,UAAWC,IAAOF,OAAxB,4BCKmBG,E,2MACnBC,MAAQ,CACNC,KAAM,GACNC,OAAQ,GACRC,SAAS,G,EAYXC,gBAAkB,SAACC,EAASJ,GAAV,OAChB,EAAKK,MAAMC,SAASC,MAAK,SAAAC,GAAC,OAAIA,EAAER,KAAKS,gBAAkBT,EAAKS,iBACxD,EAAKC,SAAS,CAAER,SAAS,IACzB,EAAKG,MAAMM,aAAX,eAA6BP,K,EAEnCQ,iBAAmB,SAAAC,GAAM,IACfC,EAAUD,EAAEE,OAAZD,MAER,EAAKJ,SAAS,CACZV,KAAMc,K,EAIVE,mBAAqB,SAAAH,GAAM,IACjBC,EAAUD,EAAEE,OAAZD,MACO,gBAEJG,KAAKH,GACd,EAAKJ,SAAS,CACZT,OAAQa,IAGV,EAAKJ,UAAS,SAAAQ,GAAS,MAAK,CAC1BjB,OAAQiB,EAAUjB,Y,EAKxBkB,aAAe,SAAAN,GACbA,EAAEO,iBADgB,MAEO,EAAKrB,MAAtBC,EAFU,EAEVA,KAAMC,EAFI,EAEJA,OAERG,EAAU,CACdZ,GAAIF,EACJU,OACAC,UAGW,KAATD,GAA0B,KAAXC,IAInB,EAAKE,gBAAgBC,EAASJ,GAC9B,EAAKU,SAAS,CAAEV,KAAM,GAAIC,OAAQ,O,wEAG1B,IAAD,EAC2BoB,KAAKtB,MAA/BC,EADD,EACCA,KAAMC,EADP,EACOA,OAAQC,EADf,EACeA,QACtB,OACE,oCAYE,0BAAMN,UAAWC,IAAOyB,KAAMC,SAAUF,KAAKF,cAC3C,2BAAOvB,UAAWC,IAAO2B,MAAOC,QAASjC,EAAGC,QAC1C,0BAAMG,UAAWC,IAAO6B,SAAxB,QACA,2BACE9B,UAAWC,IAAO8B,MAClBC,KAAK,OACLC,SAAUR,KAAKT,iBACfE,MAAOd,EACPA,KAAK,OACLR,GAAIA,EAAGC,SAERS,GAAW,kBAAC,EAAD,OAEd,2BAAON,UAAWC,IAAO2B,MAAOC,QAASjC,EAAGE,UAC1C,0BAAME,UAAWC,IAAO6B,SAAxB,UACA,2BACE9B,UAAWC,IAAO8B,MAClBC,KAAK,OACLC,SAAUR,KAAKL,mBACfF,MAAOb,EACPD,KAAK,SACLR,GAAIA,EAAGE,YAGX,4BAAQE,UAAWC,IAAOiC,OAAQF,KAAK,UAAvC,qB,GArG+BG,aCI1BC,eATS,SAAAjC,GAAK,MAAK,CAChCO,SAAUP,EAAMO,aAGS,SAAA2B,GAAQ,MAAK,CACtCtB,aAAc,SAAAP,GAAO,OAAI6B,EAASC,EAAqB9B,KACvDhB,iBAAkB,SAAAkB,GAAQ,OAAI2B,EAASC,EAA2B5B,QAGrD0B,CAA6ClC,G,kCCqB7CqC,EA3BA,SAAC,GAAD,IAAG7B,EAAH,EAAGA,SAAU8B,EAAb,EAAaA,OAAQC,EAArB,EAAqBA,SAArB,OACb,kBAACC,EAAA,EAAD,CACEC,GAAIjC,EAASkC,OAAS,EACtBC,QAAS,IACTC,WAAYC,IACZC,eAAa,GAEb,6BAAShD,UAAWC,IAAOsC,QACzB,0BAAMvC,UAAWC,IAAO6B,SAAxB,iBACA,2BACE9B,UAAWC,IAAO8B,MAClBC,KAAK,OACLd,MAAOsB,EACPP,SAAUQ,OCPHL,eATS,SAAAjC,GAAK,MAAK,CAChCqC,OAAQrC,EAAMqC,OACd9B,SAAUP,EAAMO,aAGS,SAAA2B,GAAQ,MAAK,CACtCI,SAAU,SAAAxB,GAAC,OAAIoB,EAASC,EAAwBrB,EAAEE,OAAOD,YAG5CkB,CAA6CG,G,4DCW7CU,GApBS,SAAC,GAAD,IAAG7C,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQT,EAAjB,EAAiBA,GAAIsD,EAArB,EAAqBA,gBAArB,OACtB,wBAAIlD,UAAWC,KAAOkD,SACpB,0BAAMnD,UAAWC,KAAOmD,aACrBhD,EADH,KACWC,GAEX,4BACEL,UAAWC,KAAOiC,OAClBF,KAAK,SACLqB,QAAS,kBAAMH,EAAgBtD,QCAtBwC,gBARS,SAAAjC,GAAK,MAAK,CAChCO,SAAUP,EAAMO,aAGS,SAAA2B,GAAQ,MAAK,CACtCa,gBAAiB,SAAAtD,GAAE,OAAIyC,EAAS9C,EAAcK,QAGjCwC,CAA6Ca,ICmD7CK,GAtDK,SAAC,GAA0B,IAAxB5C,EAAuB,EAAvBA,SAAU8B,EAAa,EAAbA,OAO/B,OAAQA,EAAOI,OAmBb,kBAACW,EAAA,EAAD,CAAiBC,UAAU,KAAKxD,UAAWC,IAAOwD,UAxB3C/C,EAAS8B,QAAO,SAAAhC,GAAO,OAC5BA,EAAQJ,KAAKS,cAAc6C,SAASlB,EAAO3B,kBAwBhB8C,KAAI,SAAAnD,GAAO,OACpC,kBAACkC,EAAA,EAAD,CACEkB,IAAKpD,EAAQZ,GACbiD,QAAS,IACTC,WAAYe,IACZb,eAAa,GAEb,kBAAC,GAAD,CACE5C,KAAMI,EAAQJ,KACdC,OAAQG,EAAQH,OAChBT,GAAIY,EAAQZ,GACZI,UAAWC,IAAOkD,QAClBS,IAAKpD,EAAQZ,UA/BrB,kBAAC2D,EAAA,EAAD,CAAiBC,UAAU,KAAKxD,UAAWC,IAAOwD,UAC/C/C,EAASiD,KAAI,SAAAnD,GAAO,OACnB,kBAACkC,EAAA,EAAD,CACEkB,IAAKpD,EAAQZ,GACbiD,QAAS,IACTC,WAAYe,IACZb,eAAa,GAEb,kBAAC,GAAD,CACE5C,KAAMI,EAAQJ,KACdC,OAAQG,EAAQH,OAChBT,GAAIY,EAAQZ,GACZgE,IAAKpD,EAAQZ,WCrBVwC,gBALS,SAAAjC,GAAK,MAAK,CAChCO,SAAUP,EAAMO,SAChB8B,OAAQrC,EAAMqC,UAGDJ,CAAyBkB,ICInBQ,G,2MACnB3D,MAAQ,CAAE4D,UAAU,G,mFAUlBtC,KAAKX,SAAS,CAAEiD,UAAU,IAE1B,IAAMC,EAAiBC,aAAaC,QAAQ,YACxCF,IAEFxE,EAD6BiC,KAAKhB,MAA1BjB,kBACS2E,KAAKC,MAAMJ,M,+BAItB,IACAD,EAAatC,KAAKtB,MAAlB4D,SACArD,EAAae,KAAKhB,MAAlBC,SAER,OACE,yBAAKV,UAAWC,IAAO6D,KACrB,kBAACpB,EAAA,EAAD,CACEC,GAAIoB,EACJlB,QAAS,IACTC,WAAYuB,KAEZ,wBAAIrE,UAAWC,IAAOqE,WAAtB,cAGF,kBAAC,EAAD,MACA,kBAAC5B,EAAA,EAAD,CACEC,GAAIjC,EAASkC,OAAS,EACtBC,QAAS,IACTC,WAAYyB,IACZvB,eAAa,GAEb,wBAAIhD,UAAWC,IAAOwD,UAAtB,aAEF,kBAAC,EAAD,MACA,kBAAC,GAAD,W,GA5CyBtB,aCAlBC,gBARS,SAAAjC,GAAK,MAAK,CAChCO,SAAUP,EAAMO,aAGS,SAAA2B,GAAQ,MAAK,CACtC7C,iBAAkB,SAAAkB,GAAQ,OAAI2B,EAASC,EAA2B5B,QAGrD0B,CAA6C0B,I,iBC0B7CU,GAzBUC,YALJ,CACnB/D,SAAU,GACV8B,OAAQ,KAG4B,oBACnCnD,GAAa,SAACc,EAAD,GAAyB,IAAfuE,EAAc,EAAdA,QAKtB,OAJAT,aAAaU,QACX,WACAR,KAAKS,UAAL,uBAAmBzE,EAAMO,UAAzB,CAAmCgE,MAE9B,eAAKvE,EAAZ,CAAmBO,SAAS,GAAD,oBAAMP,EAAMO,UAAZ,CAAsBgE,SANf,eAQnCnF,GAAgB,SAACY,EAAD,GAAyB,IAAfuE,EAAc,EAAdA,QAKzB,OAJAT,aAAaU,QACX,WACAR,KAAKS,UAAUzE,EAAMO,SAAS8B,QAAO,SAAAhC,GAAO,OAAIA,EAAQZ,KAAO8E,OAE1D,eACFvE,EADL,CAEEO,SAAUP,EAAMO,SAAS8B,QAAO,SAAAhC,GAAO,OAAIA,EAAQZ,KAAO8E,UAf1B,eAkBnCjF,GAAgB,SAACU,EAAD,OAAUuE,EAAV,EAAUA,QAAV,MAAyB,CACxChE,SAAUP,EAAMO,SAChB8B,OAAQkC,MApB0B,eAsBnClF,GAAmB,SAACW,EAAD,OAAUuE,EAAV,EAAUA,QAAV,sBAA8BvE,EAA9B,CAAqCO,SAAUgE,OAtB/B,ICNvBG,GAJDC,YAAe,CAC3BC,QAASP,KCGXQ,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,IACf,kBAAC,GAAD,OAEFK,SAASC,eAAe,U,kBCV1BjG,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,2BAA2B,QAAU,6BAA6B,MAAQ,2BAA2B,OAAS,+B","file":"static/js/main.9914c391.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__Ny9C0\",\"Phonebook\":\"App_Phonebook__133iz\",\"Contacts\":\"App_Contacts__3nicq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter\":\"Filter_Filter__O7rco\",\"Caption\":\"Filter_Caption__2afm1\",\"Input\":\"Filter_Input__1knzP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Contacts\":\"ContactList_Contacts__3q7AW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Contact\":\"ContactListItem_Contact__3rvpD\",\"ContactInfo\":\"ContactListItem_ContactInfo__alRJP\",\"Button\":\"ContactListItem_Button__3B5uO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__1Zi69\",\"enterActive\":\"slide_enterActive__VzD00\",\"exit\":\"slide_exit__1VE_9\",\"exitActive\":\"slide_exitActive__1ul8-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slideContacts_enter__3DdpA\",\"enterActive\":\"slideContacts_enterActive__2VUQ7\",\"exit\":\"slideContacts_exit__lRZrP\",\"exitActive\":\"slideContacts_exitActive__TBo9d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slideLogo_enter__1a6T5\",\"enterActive\":\"slideLogo_enterActive__2BeQx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Alert\":\"Alert_Alert__1caDl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"transform_enter__2D0Tu\",\"enterActive\":\"transform_enterActive__Wj7eG\",\"exit\":\"transform_exit__35pHs\",\"exitActive\":\"transform_exitActive__3kaj5\"};","import { createAction } from '@reduxjs/toolkit';\n\nconst Type = {\n  ADD_CONTACT: 'ADD_CONTACT',\n  DELETE_CONTACT: 'DELETE_CONTACT',\n  FILTER_CONTACT: 'FILTER_CONTACT',\n  GET_CONTACT_FROM_LS: 'GET_CONTACT_FROM_LS',\n};\n\nexport const addContact = createAction(Type.ADD_CONTACT);\nexport const deleteContact = createAction(Type.DELETE_CONTACT);\nexport const getContactFromLS = createAction(Type.GET_CONTACT_FROM_LS);\nexport const filterContact = createAction(Type.FILTER_CONTACT);\n","import uuid from 'uuid/v4';\n\nexport const contactID = uuid();\n\nexport const id = {\n  nameId: uuid(),\n  numberId: uuid(),\n};\n","import React from 'react';\nimport styles from './Alert.module.css';\n\nconst Alert = () => (\n  <span className={styles.Alert}>Contact already exists!</span>\n);\n\nexport default Alert;\n","import React, { Component } from 'react';\n// import { CSSTransition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\n\nimport styles from './ContactForm.module.css';\n// import slideAlertTransition from '../../transitions/slideAlert.module.css';\nimport { id, contactID } from '../../constants';\nimport Alert from '../Alert/Alert';\n\nexport default class ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n    isAlert: false,\n  };\n\n  static propTypes = {\n    onAddContact: PropTypes.func.isRequired,\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n      }),\n    ).isRequired,\n  };\n\n  isInContactList = (contact, name) =>\n    this.props.contacts.find(c => c.name.toLowerCase() === name.toLowerCase())\n      ? this.setState({ isAlert: true })\n      : this.props.onAddContact({ ...contact });\n\n  handleNameChange = e => {\n    const { value } = e.target;\n\n    this.setState({\n      name: value,\n    });\n  };\n\n  handleNumberChange = e => {\n    const { value } = e.target;\n    const regexp = /^[-\\s./0-9]*$/;\n\n    if (regexp.test(value)) {\n      this.setState({\n        number: value,\n      });\n    } else {\n      this.setState(prevState => ({\n        number: prevState.number,\n      }));\n    }\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = this.state;\n\n    const contact = {\n      id: contactID,\n      name,\n      number,\n    };\n\n    if (name === '' || number === '') {\n      return;\n    }\n\n    this.isInContactList(contact, name);\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number, isAlert } = this.state;\n    return (\n      <>\n        {/* <CSSTransition\n          in={isAlert}\n          timeout={250}\n          classNames={slideAlertTransition}\n          unmountOnExit\n          onEntered={() =>\n            setTimeout(() => this.setState({ isAlert: false }), 1500)\n          }\n        >\n          <Alert />\n        </CSSTransition> */}\n        <form className={styles.Form} onSubmit={this.handleSubmit}>\n          <label className={styles.Label} htmlFor={id.nameId}>\n            <span className={styles.Caption}>Name</span>\n            <input\n              className={styles.Input}\n              type=\"text\"\n              onChange={this.handleNameChange}\n              value={name}\n              name=\"name\"\n              id={id.nameId}\n            />\n            {isAlert && <Alert />}\n          </label>\n          <label className={styles.Label} htmlFor={id.numberId}>\n            <span className={styles.Caption}>Number</span>\n            <input\n              className={styles.Input}\n              type=\"text\"\n              onChange={this.handleNumberChange}\n              value={number}\n              name=\"number\"\n              id={id.numberId}\n            />\n          </label>\n          <button className={styles.Button} type=\"submit\">\n            Add contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport * as pbActions from '../../redux/phonebook/phonebookActions';\nimport ContactForm from './ContactForm';\n\nconst mapStateToProps = state => ({\n  contacts: state.contacts,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onAddContact: contact => dispatch(pbActions.addContact(contact)),\n  getContactFromLS: contacts => dispatch(pbActions.getContactFromLS(contacts)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\n\nimport styles from './Filter.module.css';\nimport transformTransition from '../../transitions/transform.module.css';\n\nconst Filter = ({ contacts, filter, onFilter }) => (\n  <CSSTransition\n    in={contacts.length > 1}\n    timeout={250}\n    classNames={transformTransition}\n    unmountOnExit\n  >\n    <section className={styles.Filter}>\n      <span className={styles.Caption}>Find contacts</span>\n      <input\n        className={styles.Input}\n        type=\"text\"\n        value={filter}\n        onChange={onFilter}\n      />\n    </section>\n  </CSSTransition>\n);\n\nFilter.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({ id: PropTypes.string.isRequired }),\n  ).isRequired,\n  filter: PropTypes.string.isRequired,\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { connect } from 'react-redux';\nimport * as pbActions from '../../redux/phonebook/phonebookActions';\nimport Filter from './Filter';\n\nconst mapStateToProps = state => ({\n  filter: state.filter,\n  contacts: state.contacts,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onFilter: e => dispatch(pbActions.filterContact(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactListItem.module.css';\n\nconst ContactListItem = ({ name, number, id, onDeleteContact }) => (\n  <li className={styles.Contact}>\n    <span className={styles.ContactInfo}>\n      {name}: {number}\n    </span>\n    <button\n      className={styles.Button}\n      type=\"button\"\n      onClick={() => onDeleteContact(id)}\n    />\n  </li>\n);\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import { connect } from 'react-redux';\nimport { deleteContact } from '../../redux/phonebook/phonebookActions';\nimport ContactListItem from './ContactListItem';\n\nconst mapStateToProps = state => ({\n  contacts: state.contacts,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactListItem);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n\nimport styles from './ContactList.module.css';\nimport slideTransition from '../../transitions/slide.module.css';\n\nimport ContactListItem from '../ContactListItem/ContactListItemContainer';\n\nconst ContactList = ({ contacts, filter }) => {\n  const filterContactsWithQuery = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  return !filter.length ? (\n    <TransitionGroup component=\"ul\" className={styles.Contacts}>\n      {contacts.map(contact => (\n        <CSSTransition\n          key={contact.id}\n          timeout={250}\n          classNames={slideTransition}\n          unmountOnExit\n        >\n          <ContactListItem\n            name={contact.name}\n            number={contact.number}\n            id={contact.id}\n            key={contact.id}\n          />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  ) : (\n    <TransitionGroup component=\"ul\" className={styles.Contacts}>\n      {filterContactsWithQuery().map(contact => (\n        <CSSTransition\n          key={contact.id}\n          timeout={250}\n          classNames={slideTransition}\n          unmountOnExit\n        >\n          <ContactListItem\n            name={contact.name}\n            number={contact.number}\n            id={contact.id}\n            className={styles.Contact}\n            key={contact.id}\n          />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({ id: PropTypes.string.isRequired }),\n  ).isRequired,\n  filter: PropTypes.string.isRequired,\n};\n\nexport default ContactList;\n","import { connect } from 'react-redux';\nimport ContactList from './ContactList';\n\nconst mapStateToProps = state => ({\n  contacts: state.contacts,\n  filter: state.filter,\n});\n\nexport default connect(mapStateToProps)(ContactList);\n","import React, { Component } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport styles from './App.module.css';\n\nimport slideContactsTransition from '../../transitions/slideContacts.module.css';\nimport slideLogoTransition from '../../transitions/slideLogo.module.css';\n\nimport ContactForm from '../ContactForm/ContactFormContainer';\nimport Filter from '../Filter/FilterContainer';\nimport ContactList from '../ContactList/ContactListContainer';\n\nexport default class App extends Component {\n  state = { isLoaded: false };\n\n  static propTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({ id: PropTypes.string.isRequired }),\n    ).isRequired,\n    getContactFromLS: PropTypes.func.isRequired,\n  };\n\n  componentDidMount() {\n    this.setState({ isLoaded: true });\n\n    const contactsFromLS = localStorage.getItem('contacts');\n    if (contactsFromLS) {\n      const { getContactFromLS } = this.props;\n      getContactFromLS(JSON.parse(contactsFromLS));\n    }\n  }\n\n  render() {\n    const { isLoaded } = this.state;\n    const { contacts } = this.props;\n\n    return (\n      <div className={styles.App}>\n        <CSSTransition\n          in={isLoaded}\n          timeout={500}\n          classNames={slideLogoTransition}\n        >\n          <h1 className={styles.Phonebook}>Phonebook</h1>\n        </CSSTransition>\n\n        <ContactForm />\n        <CSSTransition\n          in={contacts.length > 0}\n          timeout={500}\n          classNames={slideContactsTransition}\n          unmountOnExit\n        >\n          <h1 className={styles.Contacts}>Contacts</h1>\n        </CSSTransition>\n        <Filter />\n        <ContactList />\n      </div>\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport App from './App';\nimport * as pbActions from '../../redux/phonebook/phonebookActions';\n\nconst mapStateToProps = state => ({\n  contacts: state.contacts,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getContactFromLS: contacts => dispatch(pbActions.getContactFromLS(contacts)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { createReducer } from '@reduxjs/toolkit';\nimport {\n  addContact,\n  deleteContact,\n  getContactFromLS,\n  filterContact,\n} from './phonebookActions';\n\nconst initialState = {\n  contacts: [],\n  filter: '',\n};\n\nconst phonebookReducer = createReducer(initialState, {\n  [addContact]: (state, { payload }) => {\n    localStorage.setItem(\n      'contacts',\n      JSON.stringify([...state.contacts, payload]),\n    );\n    return { ...state, contacts: [...state.contacts, payload] };\n  },\n  [deleteContact]: (state, { payload }) => {\n    localStorage.setItem(\n      'contacts',\n      JSON.stringify(state.contacts.filter(contact => contact.id !== payload)),\n    );\n    return {\n      ...state,\n      contacts: state.contacts.filter(contact => contact.id !== payload),\n    };\n  },\n  [filterContact]: (state, { payload }) => ({\n    contacts: state.contacts,\n    filter: payload,\n  }),\n  [getContactFromLS]: (state, { payload }) => ({ ...state, contacts: payload }),\n});\n\nexport default phonebookReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport phonebookReducer from './phonebook/phonebookReducers';\n\nconst store = configureStore({\n  reducer: phonebookReducer,\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport { Provider } from 'react-redux';\nimport App from './components/App/AppContainer';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"ContactForm_Form__3j6Cy\",\"Label\":\"ContactForm_Label__KZFa5\",\"Caption\":\"ContactForm_Caption__1m9tI\",\"Input\":\"ContactForm_Input__3UdAP\",\"Button\":\"ContactForm_Button__3ccI2\"};"],"sourceRoot":""}